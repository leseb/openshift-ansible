---
- name: Add private node records
  nsupdate:
    key_name: "{{ openshift_openstack_external_nsupdate_keys['private']['key_name'] }}"
    key_secret: "{{ openshift_openstack_external_nsupdate_keys['private']['key_secret'] }}"
    key_algorithm: "{{ openshift_openstack_external_nsupdate_keys['private']['key_algorithm'] | lower }}"
    server: "{{ openshift_openstack_external_nsupdate_keys['private']['server'] }}"
    zone: "{{ openshift_openstack_nsupdate_zone }}"
    record: "{{ (hostvars[item]['ansible_hostname'] + openshift_openstack_private_hostname_suffix + '.' + openshift_openstack_full_dns_domain) | replace('.' + openshift_openstack_nsupdate_zone, '') }}"
    value: "{{ hostvars[item]['private_v4'] }}"
    type: "A"
    state: "{{ l_dns_record_state | default('present') }}"
  with_items: "{{ l_openshift_openstack_dns_update_nodes }}"
  register: nsupdate_add_result
  until: nsupdate_add_result is succeeded
  retries: 10
  when:
    - openshift_openstack_external_nsupdate_keys['private'] is defined
    - hostvars[item]['private_v4'] is defined
    - hostvars[item]['private_v4'] is not none
    - hostvars[item]['private_v4'] | string
  delay: 1


<<<<<<< HEAD
- name: Add public node records
  nsupdate:
    key_name: "{{ openshift_openstack_external_nsupdate_keys['public']['key_name'] }}"
    key_secret: "{{ openshift_openstack_external_nsupdate_keys['public']['key_secret'] }}"
    key_algorithm: "{{ openshift_openstack_external_nsupdate_keys['public']['key_algorithm'] | lower }}"
    server: "{{ openshift_openstack_external_nsupdate_keys['public']['server'] }}"
    zone: "{{ openshift_openstack_nsupdate_zone }}"
    record: "{{ (hostvars[item]['ansible_hostname'] + openshift_openstack_public_hostname_suffix + '.' + openshift_openstack_full_dns_domain) | replace('.' + openshift_openstack_nsupdate_zone, '') }}"
    value: "{{ hostvars[item]['public_v4'] }}"
    type: "A"
    state: "{{ l_dns_record_state | default('present') }}"
  with_items: "{{ l_openshift_openstack_dns_update_nodes }}"
  register: nsupdate_add_result
  until: nsupdate_add_result is succeeded
  retries: 10
=======
- name: "Generate the private Add section for DNS"
  set_fact:
    private_named_records:
      - view: "private"
        zone: "{{ openshift_openstack_full_dns_domain }}"
        server: "{{ nsupdate_server_private }}"
        key_name: "{{ nsupdate_private_key_name|default('private-' + openshift_openstack_full_dns_domain) }}"
        key_secret: "{{ nsupdate_key_secret_private }}"
        key_algorithm: "{{ nsupdate_key_algorithm_private | lower }}"
        entries: "{{ private_records }}"
  when:
    - openshift_openstack_external_nsupdate_keys['private'] is defined

- name: "Generate list of public A records"
  set_fact:
    public_records: "{{ public_records | default([]) + [ { 'type': 'A', 'hostname': hostvars[item]['ansible_hostname'], 'ip': hostvars[item]['public_v4'] } ] }}"
  with_items: "{{ groups['cluster_hosts'] }}"
  when: hostvars[item]['public_v4'] is defined

- name: "Add wildcard records to the public A records"
  set_fact:
    public_records: "{{ public_records | default([]) + [ { 'type': 'A', 'hostname': '*.' + openshift_openstack_app_subdomain, 'ip': hostvars[item]['public_v4'] } ] }}"
  with_items: "{{ groups['infra_hosts'] }}"
  when: hostvars[item]['public_v4'] is defined

- name: "Add public master cluster hostname records to the public A records (single master)"
  set_fact:
    public_records: "{{ public_records | default([]) + [ { 'type': 'A', 'hostname': (hostvars[groups.masters[0]].openshift_master_cluster_public_hostname | replace(openshift_openstack_full_dns_domain, ''))[:-1], 'ip': hostvars[groups.masters[0]].public_v4 } ] }}"
  when:
    - hostvars[groups.masters[0]].openshift_master_cluster_public_hostname is defined
    - openshift_openstack_num_masters == 1

- name: "Add public master cluster hostname records to the public A records (multi-master)"
  set_fact:
    public_records: "{{ public_records | default([]) + [ { 'type': 'A', 'hostname': (hostvars[groups.masters[0]].openshift_master_cluster_public_hostname | replace(openshift_openstack_full_dns_domain, ''))[:-1], 'ip': hostvars[groups.lb[0]].public_v4 } ] }}"
>>>>>>> Fix and cleanup not required dns bits
  when:
    - openshift_openstack_external_nsupdate_keys['public'] is defined
    - hostvars[item]['public_v4'] is defined
    - hostvars[item]['public_v4'] is not none
    - hostvars[item]['public_v4'] | string
  delay: 1

- name: Add public wildcard record
  nsupdate:
    key_name: "{{ openshift_openstack_external_nsupdate_keys['public']['key_name'] }}"
    key_secret: "{{ openshift_openstack_external_nsupdate_keys['public']['key_secret'] }}"
    key_algorithm: "{{ openshift_openstack_external_nsupdate_keys['public']['key_algorithm'] | lower }}"
    server: "{{ openshift_openstack_external_nsupdate_keys['public']['server'] }}"
    zone: "{{ openshift_openstack_nsupdate_zone }}"
    record: "{{ ('*.' + hostvars[groups.masters[0]].openshift_master_default_subdomain) | replace('.' + openshift_openstack_nsupdate_zone, '') }}"
    value: "{{ openshift_openstack_public_router_ip }}"
    type: "A"
    state: "{{ l_dns_record_state | default('present') }}"
  register: nsupdate_add_result
  until: nsupdate_add_result is succeeded
  retries: 10
  delay: 1
  when:
    - openshift_openstack_external_nsupdate_keys['public'] is defined
    - groups.masters
    - hostvars[groups.masters[0]].openshift_master_default_subdomain is defined
    - openshift_openstack_public_router_ip is defined
    - openshift_openstack_public_router_ip is not none
    - openshift_openstack_public_router_ip | string

<<<<<<< HEAD
=======
- name: "Generate the public Add section for DNS"
  set_fact:
    public_named_records:
      - view: "public"
        zone: "{{ openshift_openstack_full_dns_domain }}"
        server: "{{ nsupdate_server_public }}"
        key_name: "{{ nsupdate_public_key_name|default('public-' + openshift_openstack_full_dns_domain) }}"
        key_secret: "{{ nsupdate_key_secret_public }}"
        key_algorithm: "{{ nsupdate_key_algorithm_public | lower }}"
        entries: "{{ public_records }}"
  when:
    - openshift_openstack_external_nsupdate_keys['public'] is defined


- name: "Generate the final openshift_openstack_dns_records_add"
  set_fact:
    openshift_openstack_dns_records_add: "{{ private_named_records|default([]) + public_named_records|default([]) }}"
>>>>>>> Fix and cleanup not required dns bits

- name: Add public API record
  nsupdate:
<<<<<<< HEAD
    key_name: "{{ openshift_openstack_external_nsupdate_keys['public']['key_name'] }}"
    key_secret: "{{ openshift_openstack_external_nsupdate_keys['public']['key_secret'] }}"
    key_algorithm: "{{ openshift_openstack_external_nsupdate_keys['public']['key_algorithm'] | lower }}"
    server: "{{ openshift_openstack_external_nsupdate_keys['public']['server'] }}"
    zone: "{{ openshift_openstack_nsupdate_zone }}"
    record: "{{ hostvars[groups.masters[0]].openshift_master_cluster_public_hostname | replace('.' + openshift_openstack_nsupdate_zone, '') }}"
    value: "{{ openshift_openstack_public_api_ip }}"
    type: "A"
    state: "{{ l_dns_record_state | default('present') }}"
=======
    key_name: "{{ item.0.key_name }}"
    key_secret: "{{ item.0.key_secret }}"
    key_algorithm: "{{ item.0.key_algorithm }}"
    server: "{{ item.0.server }}"
    zone: "{{ item.0.zone }}"
    record: "{{ item.1.hostname }}"
    value: "{{ item.1.ip }}"
    type: "{{ item.1.type }}"
    # TODO(shadower): add a cleanup playbook that removes these records, too!
    state: present
  with_subelements:
    - "{{ openshift_openstack_dns_records_add | default([]) }}"
    - entries
>>>>>>> Fix and cleanup not required dns bits
  register: nsupdate_add_result
  until: nsupdate_add_result is succeeded
  retries: 10
  delay: 1
  when:
    - openshift_openstack_external_nsupdate_keys['public'] is defined
    - groups.masters
    - hostvars[groups.masters[0]].openshift_master_cluster_public_hostname is defined
    - openshift_openstack_public_api_ip is defined
    - openshift_openstack_public_api_ip is not none
    - openshift_openstack_public_api_ip | string
